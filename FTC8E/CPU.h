#pragma once
#include <stdio.h>
#include <array>

typedef unsigned char reg8;
typedef unsigned short reg16;

class CPU
{
	friend class CPUTest;
public:
	static const int CANVAS_WIDTH = 64;
	static const int CANVAS_HEIGHT = 32;
	static const int CANVAS_SIZE = CANVAS_WIDTH * CANVAS_HEIGHT;
	static float CLOCK;
	std::array<reg8, CANVAS_SIZE> gfx;
	std::array<reg8, 16> keypad;

	CPU();

	void loadROM(char* path);
	void tick();
	bool draw;
private:
	std::array<reg8, 80> chip8_fontset =
	{
		0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
		0x20, 0x60, 0x20, 0x20, 0x70, // 1
		0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
		0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
		0x90, 0x90, 0xF0, 0x10, 0x10, // 4
		0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
		0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
		0xF0, 0x10, 0x20, 0x40, 0x40, // 7
		0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
		0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
		0xF0, 0x90, 0xF0, 0x90, 0x90, // A
		0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
		0xF0, 0x80, 0x80, 0x80, 0xF0, // C
		0xE0, 0x90, 0x90, 0x90, 0xE0, // D
		0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
		0xF0, 0x80, 0xF0, 0x80, 0x80  // F
	};
	std::array<reg8, 4096> memory;
	std::array<reg16, 16> stack;
	reg16 opcode;
	// Memory

	// Registers
	std::array<reg8, 16> v;
	reg16 index;
	reg16 pc;
	reg16 sp;

	// Interrupts
	reg8 delayTimer;
	reg8 soundTimer;

	reg8 rand();
};